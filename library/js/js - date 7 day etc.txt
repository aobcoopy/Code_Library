function addDays(dateObj, numDays) {
   dateObj.setDate(dateObj.getDate() - numDays);
   return dateObj;
}

var now = new Date();
var tomorrow = addDays(new Date(), 1);
var nextWeek = addDays(new Date(), 7);
var nextWeek = addDays(new Date(), 7);

alert(
    'Today: ' + now.format("Y-m-d") +
    '\nTomorrow: ' + tomorrow.format("Y-m-d") +
    '\nNext week: ' + nextWeek.format("Y-m-d") 
);



var date = new Date('2017-02-01');
		var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
		var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

-------------------------------------------------------------------------------------------------
<div class="col-sm-3">
                        <select name="cbbRange" id="cbbRange" class="form-control" >
                            <option value="today" selected>วันนี้</option>
                            <option value="week">7 ที่ผ่านมา</option>
                            <option value="month">1 เดือนที่ผ่านมา</option>
                            <option value="custom">กำหนดเอง</option>
                            <!--<option value="today">รายวัน</option>
                            <option value="week">รายวัน</option>
                            <option value="month">รายเดือน</option>-->
                            <!--<option value="timing">ระยะเวลา</option>-->
                            <!--<option value="customer_type">ประเภทลูกค้า</option>-->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="txtName" class="col-sm-1 control-label text-right">From</label>
                        <div class="col-sm-3">
                            <input type="date" name="txFrom" id="txFrom" class="form-control dd" readonly>
                        </div>
                        
                        <label for="txtName" class="col-sm-1 control-label text-right">To</label>
                        <div class="col-sm-3">
                            <input type="date" name="txTo" id="txTo" class="form-control dd" readonly>
                        </div>
                        <div class="col-sm-1">
                            <button type="button" class="btn btn-info " onclick="generate_report();"><i class="fa fa-search" aria-hidden="true"></i></button>
                        </div>
                    </div>




function addDays(dateObj, numDays) {
   dateObj.setDate(dateObj.getDate() - numDays);
   return dateObj;
}

var now = new Date();
var tomorrow = addDays(new Date(), 1);
var nextWeek = addDays(new Date(), 7);
var nextWeek = addDays(new Date(), 7);

$(document).ready(function(e) {
	var today = new Date();
	var dd = today.getDate();
	var mm = today.getMonth()+1; //January is 0!
	var yyyy = today.getFullYear();
		
	if(dd<10){
		dd='0'+dd;
	} 
	if(mm<10){
		mm='0'+mm;
	} 
	var todays = yyyy+'-'+mm+'-'+dd;
		
	$("#txFrom").val(todays);
	$("#txTo").val(todays);
	$(".dd").attr('readonly',true);
	
	$("#cbbRange").change(function(e) {
		var view = $(this).val();
		
		if(view=='0')
		{
			$(".dd").val('');
			$(".dd").attr('readonly',true);
		}
		else if(view=='today')
		{
			$("#txFrom").val(todays);
			$("#txTo").val(todays);
			$(".dd").attr('readonly',true);
		}
		else if(view=='week')
		{
			var nextWeek = addDays(new Date(), 7);
			$("#txFrom").val(nextWeek.format("Y-m-d"));
			$("#txTo").val(todays);
			$(".dd").attr('readonly',true);
		}
		else if(view=='month')
		{
			var date = new Date();
			//var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
			var lastDay = new Date(date.getFullYear(), date.getMonth()  -1,0);
			$("#txFrom").val(lastDay.format("Y-m-d"));
			$("#txTo").val(todays);
			$(".dd").attr('readonly',true);
		}
		else
		{
			$("#txFrom").val(todays);
			$("#txTo").val(todays);
			$(".dd").attr('readonly',false);
		}
    });
});






(function( window, undefined ) {

Date.prototype.format = function(format) {
    var returnStr = '';
    var replace = Date.replaceChars;
    for (var i = 0; i < format.length; i++) {       var curChar = format.charAt(i);         if (i - 1 >= 0 && format.charAt(i - 1) == "\\") {
            returnStr += curChar;
        }
        else if (replace[curChar]) {
            returnStr += replace[curChar].call(this);
        } else if (curChar != "\\"){
            returnStr += curChar;
        }
    }
    return returnStr;
};

Date.replaceChars = {
    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    longMonths: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    longDays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],

    // Day
    d: function() { return (this.getDate() < 10 ? '0' : '') + this.getDate(); },
    D: function() { return Date.replaceChars.shortDays[this.getDay()]; },
    j: function() { return this.getDate(); },
    l: function() { return Date.replaceChars.longDays[this.getDay()]; },
    N: function() { return this.getDay() + 1; },
    S: function() { return (this.getDate() % 10 == 1 && this.getDate() != 11 ? 'st' : (this.getDate() % 10 == 2 && this.getDate() != 12 ? 'nd' : (this.getDate() % 10 == 3 && this.getDate() != 13 ? 'rd' : 'th'))); },
    w: function() { return this.getDay(); },
    z: function() { var d = new Date(this.getFullYear(),0,1); return Math.ceil((this - d) / 86400000); }, // Fixed now
    // Week
    W: function() { var d = new Date(this.getFullYear(), 0, 1); return Math.ceil((((this - d) / 86400000) + d.getDay() + 1) / 7); }, // Fixed now
    // Month
    F: function() { return Date.replaceChars.longMonths[this.getMonth()]; },
    m: function() { return (this.getMonth() < 9 ? '0' : '') + (this.getMonth() + 1); },
    M: function() { return Date.replaceChars.shortMonths[this.getMonth()]; },
    n: function() { return this.getMonth() + 1; },
    t: function() { var d = new Date(); return new Date(d.getFullYear(), d.getMonth(), 0).getDate() }, // Fixed now, gets #days of date
    // Year
    L: function() { var year = this.getFullYear(); return (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)); },   // Fixed now
    o: function() { var d  = new Date(this.valueOf());  d.setDate(d.getDate() - ((this.getDay() + 6) % 7) + 3); return d.getFullYear();}, //Fixed now
    Y: function() { return this.getFullYear(); },
    y: function() { return ('' + this.getFullYear()).substr(2); },
    // Time
    a: function() { return this.getHours() < 12 ? 'am' : 'pm'; },
    A: function() { return this.getHours() < 12 ? 'AM' : 'PM'; },
    B: function() { return Math.floor((((this.getUTCHours() + 1) % 24) + this.getUTCMinutes() / 60 + this.getUTCSeconds() / 3600) * 1000 / 24); }, // Fixed now
    g: function() { return this.getHours() % 12 || 12; },
    G: function() { return this.getHours(); },
    h: function() { return ((this.getHours() % 12 || 12) < 10 ? '0' : '') + (this.getHours() % 12 || 12); },
    H: function() { return (this.getHours() < 10 ? '0' : '') + this.getHours(); },
    i: function() { return (this.getMinutes() < 10 ? '0' : '') + this.getMinutes(); },
    s: function() { return (this.getSeconds() < 10 ? '0' : '') + this.getSeconds(); },
    u: function() { var m = this.getMilliseconds(); return (m < 10 ? '00' : (m < 100 ?
'0' : '')) + m; },
    // Timezone
    e: function() { return "Not Yet Supported"; },
    I: function() { return "Not Yet Supported"; },
    O: function() { return (-this.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.getTimezoneOffset() / 60)) + '00'; },
    P: function() { return (-this.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.getTimezoneOffset() / 60)) + ':00'; }, // Fixed now
    T: function() { var m = this.getMonth(); this.setMonth(0); var result = this.toTimeString().replace(/^.+ \(?([^\)]+)\)?$/, '$1'); this.setMonth(m); return result;},
    Z: function() { return -this.getTimezoneOffset() * 60; },
    // Full Date/Time
    c: function() { return this.format("Y-m-d\\TH:i:sP"); }, // Fixed now
    r: function() { return this.toString(); },
    U: function() { return this.getTime() / 1000; }
};
})( window );